name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-eks-cluster-1
  DOCKER_IMAGE: devops-app
  NAMESPACE: devops-app
  TERRAFORM_VERSION: 1.5.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
    
    - name: Test application
      run: |
        cd app
        python -c "import app; print('App imports successfully')"

  terraform-apply:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format Check with Auto-fix
      run: |
        cd infra/terraform
        terraform fmt -check || terraform fmt
        echo "Terraform files formatted"

    - name: Terraform Init
      id: init
      run: |
        cd infra/terraform
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        cd infra/terraform
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        cd infra/terraform
        terraform plan -no-color -out=tfplan

    - name: Terraform Apply
      run: |
        cd infra/terraform
        terraform apply -auto-approve tfplan

    - name: Wait for EKS cluster to be active
      run: |
        echo "Waiting for EKS cluster to become active..."
        # Wait for cluster to be created and active (timeout: 20 minutes)
        for i in {1..35}; do
          CLUSTER_STATUS=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query "cluster.status" --output text 2>/dev/null || echo "CREATING")
          echo "Cluster status: $CLUSTER_STATUS"
          if [ "$CLUSTER_STATUS" = "ACTIVE" ]; then
            echo "‚úÖ EKS cluster is now ACTIVE"
            break
          fi
          if [ $i -eq 35 ]; then
            echo "‚ùå Timeout waiting for cluster to become active"
            exit 1
          fi
          sleep 20
        done

    - name: Wait for node group to be ready
      run: |
        echo "Waiting for node group to become active..."
        # Wait for node group to be ready (timeout: 20 minutes)
        for i in {1..20}; do
          NODE_STATUS=$(aws eks describe-nodegroup --cluster-name ${{ env.CLUSTER_NAME }} --nodegroup-name my-node-group-my-eks-cluster-1 --region ${{ env.AWS_REGION }} --query "nodegroup.status" --output text 2>/dev/null || echo "CREATING")
          echo "Node group status: $NODE_STATUS"
          if [ "$NODE_STATUS" = "ACTIVE" ]; then
            echo "‚úÖ Node group is now ACTIVE"
            break
          fi
          if [ $i -eq 20 ]; then
            echo "‚ùå Timeout waiting for node group to become active"
            exit 1
          fi
          sleep 15
        done

    - name: Update kubeconfig after cluster creation
      run: |
        echo "Updating kubeconfig for the newly created cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
        echo "‚úÖ Kubeconfig updated successfully"
        
    - name: Verify cluster access
      run: |
        echo "Verifying cluster access..."
        kubectl cluster-info
        kubectl get nodes
        echo "‚úÖ Cluster access verified"

    - name: Create namespace
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        echo "‚úÖ Namespace created"

  build-and-push:
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        cd app
        docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .

    - name: Push Docker image to ECR
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names ${{ env.DOCKER_IMAGE }} || \
        aws ecr create-repository --repository-name ${{ env.DOCKER_IMAGE }}
        
        # Tag and push with full ECR path
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}:latest
        
        docker push $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker push $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}:latest
        
        echo "FULL_IMAGE_PATH=$ECR_REGISTRY/${{ env.DOCKER_IMAGE }}:latest" >> $GITHUB_ENV
        echo "‚úÖ Docker image pushed to ECR"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

    - name: Deploy to Kubernetes
      run: |
        # Create namespace if not exists
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Update image in deployment with full ECR path
        if [ -f "infra/kubernetes/deployment.yaml" ]; then
          sed -i "s|IMAGE_PLACEHOLDER|$FULL_IMAGE_PATH|g" infra/kubernetes/deployment.yaml
          echo "Updated deployment with image: $FULL_IMAGE_PATH"
        fi
        
        # Apply Kubernetes manifests
        if [ -d "infra/kubernetes/" ]; then
          kubectl apply -f infra/kubernetes/ -n ${{ env.NAMESPACE }} --validate=false
          echo "‚úÖ Kubernetes manifests applied from infra/kubernetes/"
        else
          echo "‚ùå Kubernetes manifests directory not found at infra/kubernetes/"
          exit 1
        fi

    - name: Debug deployment issues
      run: |
        echo "üîç Debugging deployment issues..."
        sleep 30  # Wait a bit for pods to attempt startup
        
        # Check deployment details
        kubectl get deployment devops-app -n ${{ env.NAMESPACE }} -o wide
        echo "---"
        kubectl describe deployment devops-app -n ${{ env.NAMESPACE }}
        echo "---"
        
        # Check pods and their status
        kubectl get pods -n ${{ env.NAMESPACE }} -o wide
        echo "---"
        kubectl describe pods -n ${{ env.NAMESPACE }} -l app=devops-app
        echo "---"
        
        # Check events in the namespace
        kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp'
        echo "---"
        
        # Check if there are any pod logs available
        for pod in $(kubectl get pods -n ${{ env.NAMESPACE }} -l app=devops-app -o name); do
          echo "Logs for $pod:"
          kubectl logs $pod -n ${{ env.NAMESPACE }} --tail=50 || echo "No logs available yet"
          echo "---"
        done

    - name: Verify deployment
      run: |
        echo "‚è≥ Waiting for deployment to be ready (timeout: 10 minutes)..."
        kubectl rollout status deployment/devops-app -n ${{ env.NAMESPACE }} --timeout=600s
        echo "‚úÖ Deployment verified"

    - name: Check final status
      run: |
        kubectl get pods,svc -n ${{ env.NAMESPACE }}
        echo "‚úÖ All resources deployed successfully"

    - name: Get application URL
      run: |
        echo "üéØ Application Deployment Complete!"
        echo "Application URL (LoadBalancer):"
        kubectl get service -n ${{ env.NAMESPACE }} -o wide
        echo -e "\nTo access your application, use the EXTERNAL-IP from the service above"
